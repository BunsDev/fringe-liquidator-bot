/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IFringeLiquidatorInterface extends utils.Interface {
  contractName: "IFringeLiquidator";
  functions: {
    "liquidate(address,address,address,address)": FunctionFragment;
    "primaryTokenIndex()": FunctionFragment;
    "profitReceiver()": FunctionFragment;
    "uniswapV2Call(address,uint256,uint256,bytes)": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "primaryTokenIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Call",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primaryTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Call",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFringeLiquidator extends BaseContract {
  contractName: "IFringeLiquidator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFringeLiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      flashLoanPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    primaryTokenIndex(overrides?: CallOverrides): Promise<[string]>;

    profitReceiver(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Call(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;
  };

  liquidate(
    account: string,
    projectToken: string,
    lendingToken: string,
    flashLoanPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  primaryTokenIndex(overrides?: CallOverrides): Promise<string>;

  profitReceiver(overrides?: CallOverrides): Promise<string>;

  uniswapV2Call(
    sender: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      flashLoanPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    primaryTokenIndex(overrides?: CallOverrides): Promise<string>;

    profitReceiver(overrides?: CallOverrides): Promise<string>;

    uniswapV2Call(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      flashLoanPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    primaryTokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

    profitReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Call(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      flashLoanPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    primaryTokenIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Call(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
